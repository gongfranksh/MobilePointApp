package personal.wl.mobilepointapp.entity.pos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Proid = new Property(1, String.class, "Proid", false, "PROID");
        public final static Property Barcode = new Property(2, String.class, "Barcode", false, "BARCODE");
        public final static Property ProName = new Property(3, String.class, "ProName", false, "PRO_NAME");
        public final static Property ProSName = new Property(4, String.class, "ProSName", false, "PRO_SNAME");
        public final static Property ClassId = new Property(5, String.class, "ClassId", false, "CLASS_ID");
        public final static Property Spec = new Property(6, String.class, "Spec", false, "SPEC");
        public final static Property BrandId = new Property(7, String.class, "BrandId", false, "BRAND_ID");
        public final static Property StatId = new Property(8, String.class, "StatId", false, "STAT_ID");
        public final static Property Grade = new Property(9, String.class, "Grade", false, "GRADE");
        public final static Property Area = new Property(10, String.class, "Area", false, "AREA");
        public final static Property SupId = new Property(11, String.class, "SupId", false, "SUP_ID");
        public final static Property MeasureId = new Property(12, String.class, "MeasureId", false, "MEASURE_ID");
        public final static Property PacketQty = new Property(13, Double.class, "PacketQty", false, "PACKET_QTY");
        public final static Property TaxType = new Property(14, String.class, "TaxType", false, "TAX_TYPE");
        public final static Property InTax = new Property(15, Double.class, "InTax", false, "IN_TAX");
        public final static Property TaxPrice = new Property(16, Double.class, "TaxPrice", false, "TAX_PRICE");
        public final static Property InPrice = new Property(17, Double.class, "InPrice", false, "IN_PRICE");
        public final static Property MinOrderQty = new Property(18, Double.class, "MinOrderQty", false, "MIN_ORDER_QTY");
        public final static Property NormalPrice = new Property(19, Double.class, "NormalPrice", false, "NORMAL_PRICE");
        public final static Property MemberPrice = new Property(20, Double.class, "MemberPrice", false, "MEMBER_PRICE");
        public final static Property GroupPrice = new Property(21, Double.class, "GroupPrice", false, "GROUP_PRICE");
        public final static Property ReturnRat = new Property(22, Double.class, "ReturnRat", false, "RETURN_RAT");
        public final static Property Vipdiscount = new Property(23, Double.class, "vipdiscount", false, "VIPDISCOUNT");
        public final static Property Posdiscount = new Property(24, Double.class, "posdiscount", false, "POSDISCOUNT");
        public final static Property Status = new Property(25, String.class, "Status", false, "STATUS");
        public final static Property Operatorid = new Property(26, String.class, "Operatorid", false, "OPERATORID");
        public final static Property CreateDate = new Property(27, java.util.Date.class, "CreateDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(28, java.util.Date.class, "UpdateDate", false, "UPDATE_DATE");
        public final static Property Stopdate = new Property(29, java.util.Date.class, "stopdate", false, "STOPDATE");
        public final static Property TimeStamp = new Property(30, Long.class, "TimeStamp", false, "TIME_STAMP");
    }


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROID\" TEXT," + // 1: Proid
                "\"BARCODE\" TEXT," + // 2: Barcode
                "\"PRO_NAME\" TEXT," + // 3: ProName
                "\"PRO_SNAME\" TEXT," + // 4: ProSName
                "\"CLASS_ID\" TEXT," + // 5: ClassId
                "\"SPEC\" TEXT," + // 6: Spec
                "\"BRAND_ID\" TEXT," + // 7: BrandId
                "\"STAT_ID\" TEXT," + // 8: StatId
                "\"GRADE\" TEXT," + // 9: Grade
                "\"AREA\" TEXT," + // 10: Area
                "\"SUP_ID\" TEXT," + // 11: SupId
                "\"MEASURE_ID\" TEXT," + // 12: MeasureId
                "\"PACKET_QTY\" REAL," + // 13: PacketQty
                "\"TAX_TYPE\" TEXT," + // 14: TaxType
                "\"IN_TAX\" REAL," + // 15: InTax
                "\"TAX_PRICE\" REAL," + // 16: TaxPrice
                "\"IN_PRICE\" REAL," + // 17: InPrice
                "\"MIN_ORDER_QTY\" REAL," + // 18: MinOrderQty
                "\"NORMAL_PRICE\" REAL," + // 19: NormalPrice
                "\"MEMBER_PRICE\" REAL," + // 20: MemberPrice
                "\"GROUP_PRICE\" REAL," + // 21: GroupPrice
                "\"RETURN_RAT\" REAL," + // 22: ReturnRat
                "\"VIPDISCOUNT\" REAL," + // 23: vipdiscount
                "\"POSDISCOUNT\" REAL," + // 24: posdiscount
                "\"STATUS\" TEXT," + // 25: Status
                "\"OPERATORID\" TEXT," + // 26: Operatorid
                "\"CREATE_DATE\" INTEGER," + // 27: CreateDate
                "\"UPDATE_DATE\" INTEGER," + // 28: UpdateDate
                "\"STOPDATE\" INTEGER," + // 29: stopdate
                "\"TIME_STAMP\" INTEGER);"); // 30: TimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Proid = entity.getProid();
        if (Proid != null) {
            stmt.bindString(2, Proid);
        }
 
        String Barcode = entity.getBarcode();
        if (Barcode != null) {
            stmt.bindString(3, Barcode);
        }
 
        String ProName = entity.getProName();
        if (ProName != null) {
            stmt.bindString(4, ProName);
        }
 
        String ProSName = entity.getProSName();
        if (ProSName != null) {
            stmt.bindString(5, ProSName);
        }
 
        String ClassId = entity.getClassId();
        if (ClassId != null) {
            stmt.bindString(6, ClassId);
        }
 
        String Spec = entity.getSpec();
        if (Spec != null) {
            stmt.bindString(7, Spec);
        }
 
        String BrandId = entity.getBrandId();
        if (BrandId != null) {
            stmt.bindString(8, BrandId);
        }
 
        String StatId = entity.getStatId();
        if (StatId != null) {
            stmt.bindString(9, StatId);
        }
 
        String Grade = entity.getGrade();
        if (Grade != null) {
            stmt.bindString(10, Grade);
        }
 
        String Area = entity.getArea();
        if (Area != null) {
            stmt.bindString(11, Area);
        }
 
        String SupId = entity.getSupId();
        if (SupId != null) {
            stmt.bindString(12, SupId);
        }
 
        String MeasureId = entity.getMeasureId();
        if (MeasureId != null) {
            stmt.bindString(13, MeasureId);
        }
 
        Double PacketQty = entity.getPacketQty();
        if (PacketQty != null) {
            stmt.bindDouble(14, PacketQty);
        }
 
        String TaxType = entity.getTaxType();
        if (TaxType != null) {
            stmt.bindString(15, TaxType);
        }
 
        Double InTax = entity.getInTax();
        if (InTax != null) {
            stmt.bindDouble(16, InTax);
        }
 
        Double TaxPrice = entity.getTaxPrice();
        if (TaxPrice != null) {
            stmt.bindDouble(17, TaxPrice);
        }
 
        Double InPrice = entity.getInPrice();
        if (InPrice != null) {
            stmt.bindDouble(18, InPrice);
        }
 
        Double MinOrderQty = entity.getMinOrderQty();
        if (MinOrderQty != null) {
            stmt.bindDouble(19, MinOrderQty);
        }
 
        Double NormalPrice = entity.getNormalPrice();
        if (NormalPrice != null) {
            stmt.bindDouble(20, NormalPrice);
        }
 
        Double MemberPrice = entity.getMemberPrice();
        if (MemberPrice != null) {
            stmt.bindDouble(21, MemberPrice);
        }
 
        Double GroupPrice = entity.getGroupPrice();
        if (GroupPrice != null) {
            stmt.bindDouble(22, GroupPrice);
        }
 
        Double ReturnRat = entity.getReturnRat();
        if (ReturnRat != null) {
            stmt.bindDouble(23, ReturnRat);
        }
 
        Double vipdiscount = entity.getVipdiscount();
        if (vipdiscount != null) {
            stmt.bindDouble(24, vipdiscount);
        }
 
        Double posdiscount = entity.getPosdiscount();
        if (posdiscount != null) {
            stmt.bindDouble(25, posdiscount);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(26, Status);
        }
 
        String Operatorid = entity.getOperatorid();
        if (Operatorid != null) {
            stmt.bindString(27, Operatorid);
        }
 
        java.util.Date CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindLong(28, CreateDate.getTime());
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(29, UpdateDate.getTime());
        }
 
        java.util.Date stopdate = entity.getStopdate();
        if (stopdate != null) {
            stmt.bindLong(30, stopdate.getTime());
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(31, TimeStamp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Proid = entity.getProid();
        if (Proid != null) {
            stmt.bindString(2, Proid);
        }
 
        String Barcode = entity.getBarcode();
        if (Barcode != null) {
            stmt.bindString(3, Barcode);
        }
 
        String ProName = entity.getProName();
        if (ProName != null) {
            stmt.bindString(4, ProName);
        }
 
        String ProSName = entity.getProSName();
        if (ProSName != null) {
            stmt.bindString(5, ProSName);
        }
 
        String ClassId = entity.getClassId();
        if (ClassId != null) {
            stmt.bindString(6, ClassId);
        }
 
        String Spec = entity.getSpec();
        if (Spec != null) {
            stmt.bindString(7, Spec);
        }
 
        String BrandId = entity.getBrandId();
        if (BrandId != null) {
            stmt.bindString(8, BrandId);
        }
 
        String StatId = entity.getStatId();
        if (StatId != null) {
            stmt.bindString(9, StatId);
        }
 
        String Grade = entity.getGrade();
        if (Grade != null) {
            stmt.bindString(10, Grade);
        }
 
        String Area = entity.getArea();
        if (Area != null) {
            stmt.bindString(11, Area);
        }
 
        String SupId = entity.getSupId();
        if (SupId != null) {
            stmt.bindString(12, SupId);
        }
 
        String MeasureId = entity.getMeasureId();
        if (MeasureId != null) {
            stmt.bindString(13, MeasureId);
        }
 
        Double PacketQty = entity.getPacketQty();
        if (PacketQty != null) {
            stmt.bindDouble(14, PacketQty);
        }
 
        String TaxType = entity.getTaxType();
        if (TaxType != null) {
            stmt.bindString(15, TaxType);
        }
 
        Double InTax = entity.getInTax();
        if (InTax != null) {
            stmt.bindDouble(16, InTax);
        }
 
        Double TaxPrice = entity.getTaxPrice();
        if (TaxPrice != null) {
            stmt.bindDouble(17, TaxPrice);
        }
 
        Double InPrice = entity.getInPrice();
        if (InPrice != null) {
            stmt.bindDouble(18, InPrice);
        }
 
        Double MinOrderQty = entity.getMinOrderQty();
        if (MinOrderQty != null) {
            stmt.bindDouble(19, MinOrderQty);
        }
 
        Double NormalPrice = entity.getNormalPrice();
        if (NormalPrice != null) {
            stmt.bindDouble(20, NormalPrice);
        }
 
        Double MemberPrice = entity.getMemberPrice();
        if (MemberPrice != null) {
            stmt.bindDouble(21, MemberPrice);
        }
 
        Double GroupPrice = entity.getGroupPrice();
        if (GroupPrice != null) {
            stmt.bindDouble(22, GroupPrice);
        }
 
        Double ReturnRat = entity.getReturnRat();
        if (ReturnRat != null) {
            stmt.bindDouble(23, ReturnRat);
        }
 
        Double vipdiscount = entity.getVipdiscount();
        if (vipdiscount != null) {
            stmt.bindDouble(24, vipdiscount);
        }
 
        Double posdiscount = entity.getPosdiscount();
        if (posdiscount != null) {
            stmt.bindDouble(25, posdiscount);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(26, Status);
        }
 
        String Operatorid = entity.getOperatorid();
        if (Operatorid != null) {
            stmt.bindString(27, Operatorid);
        }
 
        java.util.Date CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindLong(28, CreateDate.getTime());
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(29, UpdateDate.getTime());
        }
 
        java.util.Date stopdate = entity.getStopdate();
        if (stopdate != null) {
            stmt.bindLong(30, stopdate.getTime());
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(31, TimeStamp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Proid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Barcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ProName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ProSName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ClassId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Spec
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // BrandId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // StatId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Grade
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Area
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // SupId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // MeasureId
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // PacketQty
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // TaxType
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // InTax
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // TaxPrice
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // InPrice
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // MinOrderQty
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // NormalPrice
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // MemberPrice
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // GroupPrice
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // ReturnRat
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // vipdiscount
            cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24), // posdiscount
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // Status
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // Operatorid
            cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)), // CreateDate
            cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)), // UpdateDate
            cursor.isNull(offset + 29) ? null : new java.util.Date(cursor.getLong(offset + 29)), // stopdate
            cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30) // TimeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBarcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProSName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClassId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpec(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBrandId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGrade(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setArea(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSupId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMeasureId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPacketQty(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setTaxType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setInTax(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setTaxPrice(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setInPrice(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setMinOrderQty(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setNormalPrice(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setMemberPrice(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setGroupPrice(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setReturnRat(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setVipdiscount(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setPosdiscount(cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24));
        entity.setStatus(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setOperatorid(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCreateDate(cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)));
        entity.setUpdateDate(cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)));
        entity.setStopdate(cursor.isNull(offset + 29) ? null : new java.util.Date(cursor.getLong(offset + 29)));
        entity.setTimeStamp(cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
