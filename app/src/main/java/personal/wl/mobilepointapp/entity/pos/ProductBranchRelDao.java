package personal.wl.mobilepointapp.entity.pos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRODUCT_BRANCH_REL".
*/
public class ProductBranchRelDao extends AbstractDao<ProductBranchRel, Long> {

    public static final String TABLENAME = "PRODUCT_BRANCH_REL";

    /**
     * Properties of entity ProductBranchRel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Braid = new Property(1, String.class, "Braid", false, "BRAID");
        public final static Property Proid = new Property(2, String.class, "Proid", false, "PROID");
        public final static Property SupId = new Property(3, String.class, "SupId", false, "SUP_ID");
        public final static Property CanChangePrice = new Property(4, String.class, "CanChangePrice", false, "CAN_CHANGE_PRICE");
        public final static Property SupPmtFlag = new Property(5, String.class, "SupPmtFlag", false, "SUP_PMT_FLAG");
        public final static Property PromtFlag = new Property(6, String.class, "PromtFlag", false, "PROMT_FLAG");
        public final static Property PotFlag = new Property(7, String.class, "PotFlag", false, "POT_FLAG");
        public final static Property Dcflag = new Property(8, String.class, "Dcflag", false, "DCFLAG");
        public final static Property MinPrice = new Property(9, Double.class, "MinPrice", false, "MIN_PRICE");
        public final static Property MaxPrice = new Property(10, Double.class, "MaxPrice", false, "MAX_PRICE");
        public final static Property NormalPrice = new Property(11, Double.class, "NormalPrice", false, "NORMAL_PRICE");
        public final static Property MemberPrice = new Property(12, Double.class, "MemberPrice", false, "MEMBER_PRICE");
        public final static Property ReturnRat = new Property(13, Double.class, "ReturnRat", false, "RETURN_RAT");
        public final static Property Status = new Property(14, String.class, "Status", false, "STATUS");
        public final static Property Operatorid = new Property(15, String.class, "Operatorid", false, "OPERATORID");
        public final static Property CreateDate = new Property(16, java.util.Date.class, "CreateDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(17, java.util.Date.class, "UpdateDate", false, "UPDATE_DATE");
        public final static Property Stopdate = new Property(18, java.util.Date.class, "stopdate", false, "STOPDATE");
        public final static Property TimeStamp = new Property(19, Long.class, "TimeStamp", false, "TIME_STAMP");
    }


    public ProductBranchRelDao(DaoConfig config) {
        super(config);
    }
    
    public ProductBranchRelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_BRANCH_REL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BRAID\" TEXT," + // 1: Braid
                "\"PROID\" TEXT," + // 2: Proid
                "\"SUP_ID\" TEXT," + // 3: SupId
                "\"CAN_CHANGE_PRICE\" TEXT," + // 4: CanChangePrice
                "\"SUP_PMT_FLAG\" TEXT," + // 5: SupPmtFlag
                "\"PROMT_FLAG\" TEXT," + // 6: PromtFlag
                "\"POT_FLAG\" TEXT," + // 7: PotFlag
                "\"DCFLAG\" TEXT," + // 8: Dcflag
                "\"MIN_PRICE\" REAL," + // 9: MinPrice
                "\"MAX_PRICE\" REAL," + // 10: MaxPrice
                "\"NORMAL_PRICE\" REAL," + // 11: NormalPrice
                "\"MEMBER_PRICE\" REAL," + // 12: MemberPrice
                "\"RETURN_RAT\" REAL," + // 13: ReturnRat
                "\"STATUS\" TEXT," + // 14: Status
                "\"OPERATORID\" TEXT," + // 15: Operatorid
                "\"CREATE_DATE\" INTEGER," + // 16: CreateDate
                "\"UPDATE_DATE\" INTEGER," + // 17: UpdateDate
                "\"STOPDATE\" INTEGER," + // 18: stopdate
                "\"TIME_STAMP\" INTEGER);"); // 19: TimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_BRANCH_REL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductBranchRel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Braid = entity.getBraid();
        if (Braid != null) {
            stmt.bindString(2, Braid);
        }
 
        String Proid = entity.getProid();
        if (Proid != null) {
            stmt.bindString(3, Proid);
        }
 
        String SupId = entity.getSupId();
        if (SupId != null) {
            stmt.bindString(4, SupId);
        }
 
        String CanChangePrice = entity.getCanChangePrice();
        if (CanChangePrice != null) {
            stmt.bindString(5, CanChangePrice);
        }
 
        String SupPmtFlag = entity.getSupPmtFlag();
        if (SupPmtFlag != null) {
            stmt.bindString(6, SupPmtFlag);
        }
 
        String PromtFlag = entity.getPromtFlag();
        if (PromtFlag != null) {
            stmt.bindString(7, PromtFlag);
        }
 
        String PotFlag = entity.getPotFlag();
        if (PotFlag != null) {
            stmt.bindString(8, PotFlag);
        }
 
        String Dcflag = entity.getDcflag();
        if (Dcflag != null) {
            stmt.bindString(9, Dcflag);
        }
 
        Double MinPrice = entity.getMinPrice();
        if (MinPrice != null) {
            stmt.bindDouble(10, MinPrice);
        }
 
        Double MaxPrice = entity.getMaxPrice();
        if (MaxPrice != null) {
            stmt.bindDouble(11, MaxPrice);
        }
 
        Double NormalPrice = entity.getNormalPrice();
        if (NormalPrice != null) {
            stmt.bindDouble(12, NormalPrice);
        }
 
        Double MemberPrice = entity.getMemberPrice();
        if (MemberPrice != null) {
            stmt.bindDouble(13, MemberPrice);
        }
 
        Double ReturnRat = entity.getReturnRat();
        if (ReturnRat != null) {
            stmt.bindDouble(14, ReturnRat);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(15, Status);
        }
 
        String Operatorid = entity.getOperatorid();
        if (Operatorid != null) {
            stmt.bindString(16, Operatorid);
        }
 
        java.util.Date CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindLong(17, CreateDate.getTime());
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(18, UpdateDate.getTime());
        }
 
        java.util.Date stopdate = entity.getStopdate();
        if (stopdate != null) {
            stmt.bindLong(19, stopdate.getTime());
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(20, TimeStamp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductBranchRel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Braid = entity.getBraid();
        if (Braid != null) {
            stmt.bindString(2, Braid);
        }
 
        String Proid = entity.getProid();
        if (Proid != null) {
            stmt.bindString(3, Proid);
        }
 
        String SupId = entity.getSupId();
        if (SupId != null) {
            stmt.bindString(4, SupId);
        }
 
        String CanChangePrice = entity.getCanChangePrice();
        if (CanChangePrice != null) {
            stmt.bindString(5, CanChangePrice);
        }
 
        String SupPmtFlag = entity.getSupPmtFlag();
        if (SupPmtFlag != null) {
            stmt.bindString(6, SupPmtFlag);
        }
 
        String PromtFlag = entity.getPromtFlag();
        if (PromtFlag != null) {
            stmt.bindString(7, PromtFlag);
        }
 
        String PotFlag = entity.getPotFlag();
        if (PotFlag != null) {
            stmt.bindString(8, PotFlag);
        }
 
        String Dcflag = entity.getDcflag();
        if (Dcflag != null) {
            stmt.bindString(9, Dcflag);
        }
 
        Double MinPrice = entity.getMinPrice();
        if (MinPrice != null) {
            stmt.bindDouble(10, MinPrice);
        }
 
        Double MaxPrice = entity.getMaxPrice();
        if (MaxPrice != null) {
            stmt.bindDouble(11, MaxPrice);
        }
 
        Double NormalPrice = entity.getNormalPrice();
        if (NormalPrice != null) {
            stmt.bindDouble(12, NormalPrice);
        }
 
        Double MemberPrice = entity.getMemberPrice();
        if (MemberPrice != null) {
            stmt.bindDouble(13, MemberPrice);
        }
 
        Double ReturnRat = entity.getReturnRat();
        if (ReturnRat != null) {
            stmt.bindDouble(14, ReturnRat);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(15, Status);
        }
 
        String Operatorid = entity.getOperatorid();
        if (Operatorid != null) {
            stmt.bindString(16, Operatorid);
        }
 
        java.util.Date CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindLong(17, CreateDate.getTime());
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(18, UpdateDate.getTime());
        }
 
        java.util.Date stopdate = entity.getStopdate();
        if (stopdate != null) {
            stmt.bindLong(19, stopdate.getTime());
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(20, TimeStamp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductBranchRel readEntity(Cursor cursor, int offset) {
        ProductBranchRel entity = new ProductBranchRel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Braid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Proid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SupId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CanChangePrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SupPmtFlag
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PromtFlag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PotFlag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Dcflag
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // MinPrice
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // MaxPrice
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // NormalPrice
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // MemberPrice
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // ReturnRat
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Status
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Operatorid
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // CreateDate
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // UpdateDate
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // stopdate
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19) // TimeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductBranchRel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBraid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSupId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCanChangePrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSupPmtFlag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPromtFlag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPotFlag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDcflag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMinPrice(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setMaxPrice(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setNormalPrice(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setMemberPrice(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setReturnRat(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setStatus(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOperatorid(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreateDate(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setUpdateDate(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setStopdate(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setTimeStamp(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductBranchRel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductBranchRel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductBranchRel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
