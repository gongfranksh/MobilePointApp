package personal.wl.mobilepointapp.entity.pos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PMT_DM_REL".
*/
public class PmtDmRelDao extends AbstractDao<PmtDmRel, Long> {

    public static final String TABLENAME = "PMT_DM_REL";

    /**
     * Properties of entity PmtDmRel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Braid = new Property(1, String.class, "Braid", false, "BRAID");
        public final static Property DMId = new Property(2, String.class, "DMId", false, "DMID");
        public final static Property DMBeginDate = new Property(3, java.util.Date.class, "DMBeginDate", false, "DMBEGIN_DATE");
        public final static Property DMEndDate = new Property(4, java.util.Date.class, "DMEndDate", false, "DMEND_DATE");
        public final static Property SupId = new Property(5, String.class, "SupId", false, "SUP_ID");
        public final static Property Proid = new Property(6, String.class, "Proid", false, "PROID");
        public final static Property OrigSalePrice = new Property(7, Double.class, "OrigSalePrice", false, "ORIG_SALE_PRICE");
        public final static Property SalePrice = new Property(8, Double.class, "SalePrice", false, "SALE_PRICE");
        public final static Property TimeStamp = new Property(9, Long.class, "TimeStamp", false, "TIME_STAMP");
    }


    public PmtDmRelDao(DaoConfig config) {
        super(config);
    }
    
    public PmtDmRelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PMT_DM_REL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BRAID\" TEXT," + // 1: Braid
                "\"DMID\" TEXT," + // 2: DMId
                "\"DMBEGIN_DATE\" INTEGER," + // 3: DMBeginDate
                "\"DMEND_DATE\" INTEGER," + // 4: DMEndDate
                "\"SUP_ID\" TEXT," + // 5: SupId
                "\"PROID\" TEXT," + // 6: Proid
                "\"ORIG_SALE_PRICE\" REAL," + // 7: OrigSalePrice
                "\"SALE_PRICE\" REAL," + // 8: SalePrice
                "\"TIME_STAMP\" INTEGER);"); // 9: TimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PMT_DM_REL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PmtDmRel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Braid = entity.getBraid();
        if (Braid != null) {
            stmt.bindString(2, Braid);
        }
 
        String DMId = entity.getDMId();
        if (DMId != null) {
            stmt.bindString(3, DMId);
        }
 
        java.util.Date DMBeginDate = entity.getDMBeginDate();
        if (DMBeginDate != null) {
            stmt.bindLong(4, DMBeginDate.getTime());
        }
 
        java.util.Date DMEndDate = entity.getDMEndDate();
        if (DMEndDate != null) {
            stmt.bindLong(5, DMEndDate.getTime());
        }
 
        String SupId = entity.getSupId();
        if (SupId != null) {
            stmt.bindString(6, SupId);
        }
 
        String Proid = entity.getProid();
        if (Proid != null) {
            stmt.bindString(7, Proid);
        }
 
        Double OrigSalePrice = entity.getOrigSalePrice();
        if (OrigSalePrice != null) {
            stmt.bindDouble(8, OrigSalePrice);
        }
 
        Double SalePrice = entity.getSalePrice();
        if (SalePrice != null) {
            stmt.bindDouble(9, SalePrice);
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(10, TimeStamp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PmtDmRel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Braid = entity.getBraid();
        if (Braid != null) {
            stmt.bindString(2, Braid);
        }
 
        String DMId = entity.getDMId();
        if (DMId != null) {
            stmt.bindString(3, DMId);
        }
 
        java.util.Date DMBeginDate = entity.getDMBeginDate();
        if (DMBeginDate != null) {
            stmt.bindLong(4, DMBeginDate.getTime());
        }
 
        java.util.Date DMEndDate = entity.getDMEndDate();
        if (DMEndDate != null) {
            stmt.bindLong(5, DMEndDate.getTime());
        }
 
        String SupId = entity.getSupId();
        if (SupId != null) {
            stmt.bindString(6, SupId);
        }
 
        String Proid = entity.getProid();
        if (Proid != null) {
            stmt.bindString(7, Proid);
        }
 
        Double OrigSalePrice = entity.getOrigSalePrice();
        if (OrigSalePrice != null) {
            stmt.bindDouble(8, OrigSalePrice);
        }
 
        Double SalePrice = entity.getSalePrice();
        if (SalePrice != null) {
            stmt.bindDouble(9, SalePrice);
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(10, TimeStamp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PmtDmRel readEntity(Cursor cursor, int offset) {
        PmtDmRel entity = new PmtDmRel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Braid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DMId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // DMBeginDate
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // DMEndDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SupId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Proid
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // OrigSalePrice
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // SalePrice
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // TimeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PmtDmRel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBraid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDMId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDMBeginDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDMEndDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSupId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrigSalePrice(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setSalePrice(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setTimeStamp(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PmtDmRel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PmtDmRel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PmtDmRel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
