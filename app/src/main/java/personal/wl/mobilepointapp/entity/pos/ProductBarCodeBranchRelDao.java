package personal.wl.mobilepointapp.entity.pos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRODUCT_BAR_CODE_BRANCH_REL".
*/
public class ProductBarCodeBranchRelDao extends AbstractDao<ProductBarCodeBranchRel, Long> {

    public static final String TABLENAME = "PRODUCT_BAR_CODE_BRANCH_REL";

    /**
     * Properties of entity ProductBarCodeBranchRel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Braid = new Property(1, String.class, "Braid", false, "BRAID");
        public final static Property Proid = new Property(2, String.class, "Proid", false, "PROID");
        public final static Property Barcode = new Property(3, String.class, "Barcode", false, "BARCODE");
        public final static Property BarMode = new Property(4, String.class, "BarMode", false, "BAR_MODE");
        public final static Property Quantity = new Property(5, Double.class, "Quantity", false, "QUANTITY");
        public final static Property NormalPrice = new Property(6, Double.class, "NormalPrice", false, "NORMAL_PRICE");
        public final static Property MemberPrice = new Property(7, Double.class, "MemberPrice", false, "MEMBER_PRICE");
        public final static Property Status = new Property(8, String.class, "Status", false, "STATUS");
        public final static Property Operatorid = new Property(9, String.class, "Operatorid", false, "OPERATORID");
        public final static Property Spec = new Property(10, String.class, "Spec", false, "SPEC");
        public final static Property MainFlag = new Property(11, String.class, "MainFlag", false, "MAIN_FLAG");
        public final static Property TimeStamp = new Property(12, Long.class, "TimeStamp", false, "TIME_STAMP");
        public final static Property CreateDate = new Property(13, java.util.Date.class, "CreateDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(14, java.util.Date.class, "UpdateDate", false, "UPDATE_DATE");
    }


    public ProductBarCodeBranchRelDao(DaoConfig config) {
        super(config);
    }
    
    public ProductBarCodeBranchRelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_BAR_CODE_BRANCH_REL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BRAID\" TEXT," + // 1: Braid
                "\"PROID\" TEXT," + // 2: Proid
                "\"BARCODE\" TEXT," + // 3: Barcode
                "\"BAR_MODE\" TEXT," + // 4: BarMode
                "\"QUANTITY\" REAL," + // 5: Quantity
                "\"NORMAL_PRICE\" REAL," + // 6: NormalPrice
                "\"MEMBER_PRICE\" REAL," + // 7: MemberPrice
                "\"STATUS\" TEXT," + // 8: Status
                "\"OPERATORID\" TEXT," + // 9: Operatorid
                "\"SPEC\" TEXT," + // 10: Spec
                "\"MAIN_FLAG\" TEXT," + // 11: MainFlag
                "\"TIME_STAMP\" INTEGER," + // 12: TimeStamp
                "\"CREATE_DATE\" INTEGER," + // 13: CreateDate
                "\"UPDATE_DATE\" INTEGER);"); // 14: UpdateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_BAR_CODE_BRANCH_REL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductBarCodeBranchRel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Braid = entity.getBraid();
        if (Braid != null) {
            stmt.bindString(2, Braid);
        }
 
        String Proid = entity.getProid();
        if (Proid != null) {
            stmt.bindString(3, Proid);
        }
 
        String Barcode = entity.getBarcode();
        if (Barcode != null) {
            stmt.bindString(4, Barcode);
        }
 
        String BarMode = entity.getBarMode();
        if (BarMode != null) {
            stmt.bindString(5, BarMode);
        }
 
        Double Quantity = entity.getQuantity();
        if (Quantity != null) {
            stmt.bindDouble(6, Quantity);
        }
 
        Double NormalPrice = entity.getNormalPrice();
        if (NormalPrice != null) {
            stmt.bindDouble(7, NormalPrice);
        }
 
        Double MemberPrice = entity.getMemberPrice();
        if (MemberPrice != null) {
            stmt.bindDouble(8, MemberPrice);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(9, Status);
        }
 
        String Operatorid = entity.getOperatorid();
        if (Operatorid != null) {
            stmt.bindString(10, Operatorid);
        }
 
        String Spec = entity.getSpec();
        if (Spec != null) {
            stmt.bindString(11, Spec);
        }
 
        String MainFlag = entity.getMainFlag();
        if (MainFlag != null) {
            stmt.bindString(12, MainFlag);
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(13, TimeStamp);
        }
 
        java.util.Date CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindLong(14, CreateDate.getTime());
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(15, UpdateDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductBarCodeBranchRel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Braid = entity.getBraid();
        if (Braid != null) {
            stmt.bindString(2, Braid);
        }
 
        String Proid = entity.getProid();
        if (Proid != null) {
            stmt.bindString(3, Proid);
        }
 
        String Barcode = entity.getBarcode();
        if (Barcode != null) {
            stmt.bindString(4, Barcode);
        }
 
        String BarMode = entity.getBarMode();
        if (BarMode != null) {
            stmt.bindString(5, BarMode);
        }
 
        Double Quantity = entity.getQuantity();
        if (Quantity != null) {
            stmt.bindDouble(6, Quantity);
        }
 
        Double NormalPrice = entity.getNormalPrice();
        if (NormalPrice != null) {
            stmt.bindDouble(7, NormalPrice);
        }
 
        Double MemberPrice = entity.getMemberPrice();
        if (MemberPrice != null) {
            stmt.bindDouble(8, MemberPrice);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(9, Status);
        }
 
        String Operatorid = entity.getOperatorid();
        if (Operatorid != null) {
            stmt.bindString(10, Operatorid);
        }
 
        String Spec = entity.getSpec();
        if (Spec != null) {
            stmt.bindString(11, Spec);
        }
 
        String MainFlag = entity.getMainFlag();
        if (MainFlag != null) {
            stmt.bindString(12, MainFlag);
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(13, TimeStamp);
        }
 
        java.util.Date CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindLong(14, CreateDate.getTime());
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(15, UpdateDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductBarCodeBranchRel readEntity(Cursor cursor, int offset) {
        ProductBarCodeBranchRel entity = new ProductBarCodeBranchRel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Braid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Proid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Barcode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BarMode
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // Quantity
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // NormalPrice
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // MemberPrice
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Operatorid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Spec
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // MainFlag
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // TimeStamp
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // CreateDate
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)) // UpdateDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductBarCodeBranchRel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBraid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBarcode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBarMode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuantity(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setNormalPrice(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setMemberPrice(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOperatorid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSpec(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMainFlag(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTimeStamp(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setCreateDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setUpdateDate(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductBarCodeBranchRel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductBarCodeBranchRel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductBarCodeBranchRel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
