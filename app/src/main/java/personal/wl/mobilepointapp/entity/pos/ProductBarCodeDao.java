package personal.wl.mobilepointapp.entity.pos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRODUCT_BAR_CODE".
*/
public class ProductBarCodeDao extends AbstractDao<ProductBarCode, Long> {

    public static final String TABLENAME = "PRODUCT_BAR_CODE";

    /**
     * Properties of entity ProductBarCode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Proid = new Property(1, String.class, "Proid", false, "PROID");
        public final static Property Barcode = new Property(2, String.class, "Barcode", false, "BARCODE");
        public final static Property BarMode = new Property(3, String.class, "BarMode", false, "BAR_MODE");
        public final static Property Quantity = new Property(4, Double.class, "Quantity", false, "QUANTITY");
        public final static Property NormalPrice = new Property(5, Double.class, "NormalPrice", false, "NORMAL_PRICE");
        public final static Property MemberPrice = new Property(6, Double.class, "MemberPrice", false, "MEMBER_PRICE");
        public final static Property Status = new Property(7, Double.class, "Status", false, "STATUS");
        public final static Property MainFlag = new Property(8, String.class, "MainFlag", false, "MAIN_FLAG");
        public final static Property TimeStamp = new Property(9, Long.class, "TimeStamp", false, "TIME_STAMP");
    }


    public ProductBarCodeDao(DaoConfig config) {
        super(config);
    }
    
    public ProductBarCodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_BAR_CODE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROID\" TEXT," + // 1: Proid
                "\"BARCODE\" TEXT," + // 2: Barcode
                "\"BAR_MODE\" TEXT," + // 3: BarMode
                "\"QUANTITY\" REAL," + // 4: Quantity
                "\"NORMAL_PRICE\" REAL," + // 5: NormalPrice
                "\"MEMBER_PRICE\" REAL," + // 6: MemberPrice
                "\"STATUS\" REAL," + // 7: Status
                "\"MAIN_FLAG\" TEXT," + // 8: MainFlag
                "\"TIME_STAMP\" INTEGER);"); // 9: TimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_BAR_CODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductBarCode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Proid = entity.getProid();
        if (Proid != null) {
            stmt.bindString(2, Proid);
        }
 
        String Barcode = entity.getBarcode();
        if (Barcode != null) {
            stmt.bindString(3, Barcode);
        }
 
        String BarMode = entity.getBarMode();
        if (BarMode != null) {
            stmt.bindString(4, BarMode);
        }
 
        Double Quantity = entity.getQuantity();
        if (Quantity != null) {
            stmt.bindDouble(5, Quantity);
        }
 
        Double NormalPrice = entity.getNormalPrice();
        if (NormalPrice != null) {
            stmt.bindDouble(6, NormalPrice);
        }
 
        Double MemberPrice = entity.getMemberPrice();
        if (MemberPrice != null) {
            stmt.bindDouble(7, MemberPrice);
        }
 
        Double Status = entity.getStatus();
        if (Status != null) {
            stmt.bindDouble(8, Status);
        }
 
        String MainFlag = entity.getMainFlag();
        if (MainFlag != null) {
            stmt.bindString(9, MainFlag);
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(10, TimeStamp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductBarCode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Proid = entity.getProid();
        if (Proid != null) {
            stmt.bindString(2, Proid);
        }
 
        String Barcode = entity.getBarcode();
        if (Barcode != null) {
            stmt.bindString(3, Barcode);
        }
 
        String BarMode = entity.getBarMode();
        if (BarMode != null) {
            stmt.bindString(4, BarMode);
        }
 
        Double Quantity = entity.getQuantity();
        if (Quantity != null) {
            stmt.bindDouble(5, Quantity);
        }
 
        Double NormalPrice = entity.getNormalPrice();
        if (NormalPrice != null) {
            stmt.bindDouble(6, NormalPrice);
        }
 
        Double MemberPrice = entity.getMemberPrice();
        if (MemberPrice != null) {
            stmt.bindDouble(7, MemberPrice);
        }
 
        Double Status = entity.getStatus();
        if (Status != null) {
            stmt.bindDouble(8, Status);
        }
 
        String MainFlag = entity.getMainFlag();
        if (MainFlag != null) {
            stmt.bindString(9, MainFlag);
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(10, TimeStamp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductBarCode readEntity(Cursor cursor, int offset) {
        ProductBarCode entity = new ProductBarCode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Proid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Barcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BarMode
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // Quantity
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // NormalPrice
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // MemberPrice
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // Status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // MainFlag
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // TimeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductBarCode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBarcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBarMode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuantity(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setNormalPrice(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setMemberPrice(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setMainFlag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTimeStamp(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductBarCode entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductBarCode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductBarCode entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
