package personal.wl.mobilepointapp.entity.pos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRODUCT_CLASS".
*/
public class ProductClassDao extends AbstractDao<ProductClass, Long> {

    public static final String TABLENAME = "PRODUCT_CLASS";

    /**
     * Properties of entity ProductClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClassId = new Property(1, String.class, "ClassId", false, "CLASS_ID");
        public final static Property ClassName = new Property(2, String.class, "ClassName", false, "CLASS_NAME");
        public final static Property TimeStamp = new Property(3, Long.class, "TimeStamp", false, "TIME_STAMP");
        public final static Property Status = new Property(4, Double.class, "Status", false, "STATUS");
        public final static Property CreateDate = new Property(5, java.util.Date.class, "CreateDate", false, "CREATE_DATE");
        public final static Property UpdateDate = new Property(6, java.util.Date.class, "UpdateDate", false, "UPDATE_DATE");
    }


    public ProductClassDao(DaoConfig config) {
        super(config);
    }
    
    public ProductClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_CLASS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLASS_ID\" TEXT," + // 1: ClassId
                "\"CLASS_NAME\" TEXT," + // 2: ClassName
                "\"TIME_STAMP\" INTEGER," + // 3: TimeStamp
                "\"STATUS\" REAL," + // 4: Status
                "\"CREATE_DATE\" INTEGER," + // 5: CreateDate
                "\"UPDATE_DATE\" INTEGER);"); // 6: UpdateDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_CLASS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductClass entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ClassId = entity.getClassId();
        if (ClassId != null) {
            stmt.bindString(2, ClassId);
        }
 
        String ClassName = entity.getClassName();
        if (ClassName != null) {
            stmt.bindString(3, ClassName);
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(4, TimeStamp);
        }
 
        Double Status = entity.getStatus();
        if (Status != null) {
            stmt.bindDouble(5, Status);
        }
 
        java.util.Date CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindLong(6, CreateDate.getTime());
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(7, UpdateDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductClass entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ClassId = entity.getClassId();
        if (ClassId != null) {
            stmt.bindString(2, ClassId);
        }
 
        String ClassName = entity.getClassName();
        if (ClassName != null) {
            stmt.bindString(3, ClassName);
        }
 
        Long TimeStamp = entity.getTimeStamp();
        if (TimeStamp != null) {
            stmt.bindLong(4, TimeStamp);
        }
 
        Double Status = entity.getStatus();
        if (Status != null) {
            stmt.bindDouble(5, Status);
        }
 
        java.util.Date CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindLong(6, CreateDate.getTime());
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(7, UpdateDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductClass readEntity(Cursor cursor, int offset) {
        ProductClass entity = new ProductClass( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ClassId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ClassName
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // TimeStamp
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // Status
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // CreateDate
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // UpdateDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductClass entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClassId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClassName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeStamp(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUpdateDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductClass entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductClass entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductClass entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
